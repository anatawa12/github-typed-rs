/// because of intellij IDEA's proc macro support,
/// It's not possible to use schemafy::schemafy proc macro so
/// this generates schema file with schemafy library.

use std::fmt::Display;
use std::fs::File;
use std::io::{BufReader, BufWriter, Write};
use std::process::{Command, Stdio};

fn main() {
    println!("cargo:rerun-if-changed=../schema/openapi-schema.json");
    println!("cargo:rerun-if-changed=build.rs");

    let json = File::open("../schema/openapi-schema.json")
        .expect("openapi-schema not found");
    let json = BufReader::new(json);

    let schema = serde_json::from_reader(json).unwrap();
    let mut expander = schemafy_lib::Expander::new(
        Some("OpenApiSchema"),
        "::schemafy_core::",
        &schema,
    );
    let expanded = expander.expand(&schema);

    let out_file = File::create("src/schema_generated.rs")
        .expect("creating schema_generated.rs failed");
    let mut out_file = BufWriter::new(out_file);

    print_prettify_code_with_rustfmt(&expanded, &mut out_file);
    drop(out_file)
}

//noinspection SpellCheckingInspection
fn print_prettify_code_with_rustfmt<T: Display + ?Sized, W: Write>(source: &T, mut out: W) {
    let mut process = Command::new("rustfmt")
        .stdin(Stdio::piped())
        .stdout(Stdio::piped())
        .spawn()
        .expect("failed to execute process");
    let stdin = process.stdin.take().expect("Failed to open stdin");
    let mut stdin = BufWriter::new(stdin);
    stdin.write_fmt(format_args!("{}", source)).expect("Failed to write source");
    drop(stdin);
    let mut stdout = process.stdout.take().expect("Failed to open stdout");
    writeln!(out, "// THIS IS GENERATED BY build.rs FROM openapi-schema.json").expect("writing output failed");
    writeln!(out, "// WITH schemafy AND rustfmt. DO NOT EDIT BY HAND.").expect("writing output failed");
    std::io::copy(&mut stdout, &mut out).expect("writing output failed");
    process.wait_with_output().expect("Failed to wait for output");
}
